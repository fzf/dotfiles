# symlinks files
#   $1 - source file
#   $2 - link destination
link() {
  from="$1"
  to="$2"
  ln -shF "$from" "$to"
  from=${from/*\//}
  to=${to//$HOME/\~}
  echo "Linking '$from' to '$to'"
}

# recursively links files
#   $1 - source directory
#   $2 - destination directory
#   $3 - (internal) escaped source directory
rlink() {
  current="$1"  # current dir when 2 params, base dir when 3
  dest="$2"     # destination dir
  base="$3"     # escaped base directory
  if [ -z "$base" ]; then
    base="$( echo "$current/" | sed 's/\//\\\//g' )"
  fi

  for location in $current/*; do
    suffix="$(echo $location | sed "s/$base//")"

    if [ -d $location ]; then
      # ensure destination directory exists
      mkdir -p $dest/$suffix
      # recurse if directory
      rlink $location $dest $base

    elif [ -f $location ]; then
      # link file
      link $location $dest/$suffix
    fi
  done
}

# clones or updates the repo at the current path
#   $1 - author/repo
#   $2 - (optional) destination
#   $3 - (optional) commit hash. $2 must be set to use $3
gitsync() {
  name="$1"
  repo="git@github.com:$1.git"
  path=`pwd`

  # determine the destination repo
  dest="$(echo $name | sed 's/.*\///')"
  if [ "$2" ]; then
    dest="$2"
  fi

  if [ -d $dest ]; then
    # ensure repo is up to date
    echo "Ensuring GitHub repo $name is up to date"
    cd $dest
    git fetch origin
    git reset --hard origin/master >/dev/null
    cd $path
  else
    # clone repo
    echo "Cloning GitHub repo $name to $dest"
    option="--depth 1"
    if [ "$3" ]; then option=""; fi
    git clone $option "$repo" "$dest" >/dev/null
  fi

  # optionally specify a commit hash that the repo should be reset to
  if [ "$3" ]; then
    echo "Ensuring $name is set to commit $3"
    cd $dest
    git reset --hard $3 >/dev/null
    cd $path
  fi
}
